field = field,
value = value,
# disaster = "storm",
date.start = date.start
)
numero = 68
test_1 = PRINT_SEARCH(
res = res,
numero = numero,
namefile = "test_2",
txt = TRUE,
html = TRUE,
pdf = TRUE
)
endpoint=1
fields[endpoint]
res
res$href
res=Main(endpoint = 2)
x = res=Main(endpoint = 2)
res=Main(endpoint = 2)
res
res$data[[1]]
res$data[[1]]$href
res$href
res$data[[1]]$href
PRINT_SEARCH = function(res,
numero,
namefile,
endpoint,
txt = NULL,
html = NULL,
pdf = NULL) {
# Menu results :
lapply(res$data,function(x){x$fields$name})
# Request URL :
url  = res$data[[numero]]$href
req  = request(url)
resp = req_perform(req)
resp = resp_body_json(resp)
# Print resource to txt file :
if(!is.null(txt)){
sink(
file = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/Logs/",
namefile,
".txt"
),
append = FALSE,
type = c("output")
)
print(resp$data[[1]]$fields$title)
# print(resp$data[[1]]$fields$name)
# print(resp$data[[1]]$fields$description)
print(resp$data[[1]]$fields$body)
sink()
}
# Print resource as HTML :
if(!is.null(html)){
sink(
file = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/HTML/",
namefile,
".html"
),
append = FALSE,
type = c("output")
)
print(resp$data[[1]]$fields$`description-html`)
print(resp$data[[1]]$fields$`body-html`)
sink()
}
# Save pdf file :
if (!is.null(pdf)) {
req_perform(
request(resp$data[[1]]$fields$file[[1]]$url),
path = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/PDF/",
namefile,
".pdf"
)
)
}
# sink(file = paste0("C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/Logs/",namefile,"_pdf.txt"), append = FALSE, type = c("output"))
# if(pdf==TRUE){
# library(pdftools)
# pdftools::pdf_text(pdf = req$body)
# }
# sink()
return(resp_body_json(req_perform(req)))
}
type = "reports"
x = Param_table[,2] == type
field = Param_table[x,1]
field
type = "disasters"
x = Param_table[,2] == type
field = Param_table[x,1]
field
numero=4
knitr::opts_chunk$set(echo = TRUE)
# Packages installation
# install.packages("httr2")
# install.packages("rjson")
# Load the package required to http protocole management.
library("httr2")
# Load the package required to read JSON files.
library("rjson")
# DEFINE [ENDPOINTS ; FIELDS] CORRESPONDENCE TABLE :
# Each ENDPOINTs have it's own structure in the Relief Web API
# (see "https://apidoc.reliefweb.int/fields-tables" for more).
# For this to be transparent to user, function needs to switch those on demande.
# RECALL : ENDPOINTs are to be chosen in a list, same as following :
endpoints = c(
"reports",
"disasters",
"countries",
"jobs",
"training",
"sources",
"blog",
"book"
)
# Thus the corresponding fields-table for TITLE/NAME :
fields = c(
"title", # reports
"name",  # disasters
"name",  # "countries",
"title", # "jobs",
"title", # "training",
"name",  # "sources",
"title", # "blog",
"title"  # "book",
)
Param_table = cbind(fields,endpoints)
url  = res$data[[numero]]$href
url
req  = request(url)
resp = req_perform(req)
resp = resp_body_json(resp)
resp
resp
resp$href
resp$data[[1]]$fields$status
resp$data[[1]]$fields$title
resp$data[[1]]$fields$name
field
eval(parse(text = paste0("print(resp$data[[1]]$fields$",field,")")))
resp$data[[1]]$fields$description
res
res$href
res=Main(endpoint = 1)
res
res$data[[1]]
res$data[[1]]$fields$title
res$data[[1]]$href
req_perform(request(res$data[[1]]$fields$title),path = "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/")
req_perform(request(res$data[[1]]$fields$title),path = "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/")
request(res$data[[1]]$fields$title)
req_perform(request(res$data[[1]]$fields$title),path = "C:\Users\Benjamin\Documents\GITHub\HDX_Proj-1\DATAs\")
req_perform(request(res$data[[1]]$fields$title),path = "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/telechargement")
req_perform(request(res$data[[1]]$fields$title),path = "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/telechargement")
res$data[[1]]$fields$title
res$data[[1]]$href
req_perform(request(res$data[[1]]$href),path = "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/telechargement")
x = req_perform(request(res$data[[1]]$href),path = "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/telechargement")
res
res$href
x = req_perform(request(res$data[[1]]$href),path = "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/telechargement")
x
x$body
x$body
x$url
PRINT_SEARCH = function(res,
numero,
namefile,
endpoint,
txt = NULL,
html = NULL,
pdf = NULL) {
# Get specific ENDPOINT item :
x = Param_table[,2] == type
field = Param_table[x,1]
# Menu results :
lapply(res$data,function(x){x$fields$name})
# Request URL :
url  = res$data[[numero]]$href
req  = request(url)
resp = req_perform(req)
resp = resp_body_json(resp)
# Print resource to txt file :
if(!is.null(txt)){
# sink(
#   file = paste0(
#     "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/Logs/",
#     namefile,
#     ".txt"
#   ),
#   append = FALSE,
#   type = c("output")
# )
ifelse(endpoint == 1,
req_perform(
request(res$data[[1]]$href),
path = paste0("C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/",namefile)),
ifelse(endpoint == 2,
resp$data[[1]]$fields$description,
"autre type de document..."
))
# print(resp$data[[1]]$fields$name)
# print(resp$data[[1]]$fields$description)
print(resp$data[[1]]$fields$body)
# sink()
}
# Print resource as HTML :
if(!is.null(html)){
sink(
file = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/HTML/",
namefile,
".html"
),
append = FALSE,
type = c("output")
)
print(resp$data[[1]]$fields$`description-html`)
print(resp$data[[1]]$fields$`body-html`)
sink()
}
# Save pdf file :
if (!is.null(pdf)) {
req_perform(
request(resp$data[[1]]$fields$file[[1]]$url),
path = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/PDF/",
namefile,
".pdf"
)
)
}
# sink(file = paste0("C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/Logs/",namefile,"_pdf.txt"), append = FALSE, type = c("output"))
# if(pdf==TRUE){
# library(pdftools)
# pdftools::pdf_text(pdf = req$body)
# }
# sink()
return(resp_body_json(req_perform(req)))
}
endpoint = 1
limit = 100
value = c("WHO", "congo")
# RECALL : field must correspond to result structure (see Relief Web API) :
# Either :
field = c("title", "title")
# Either :
# field = c("name")
# Paramatrisation :
# operator = "AND"
date.start = "2020-01-02"
date.end = "2020-01-02"
res = Main(
endpoint = endpoint,
limit = limit,
field = field,
value = value,
# disaster = "storm",
date.start = date.start
)
numero = 68
test_1 = PRINT_SEARCH(
res = res,
numero = numero,
namefile = "test_2",
txt = TRUE,
html = TRUE,
pdf = TRUE
)
test_1 = PRINT_SEARCH(
res = res,
numero = numero,
endpoint = endpoint,
namefile = "test_2",
txt = TRUE,
html = TRUE,
pdf = TRUE
)
resp
resp$data[[1]]$fields$url
resp$data[[1]]$fields$url_alias
PRINT_SEARCH = function(res,
numero,
namefile,
endpoint,
txt = NULL,
html = NULL,
pdf = NULL) {
# Get specific ENDPOINT item :
x = Param_table[,2] == type
field = Param_table[x,1]
# Menu results :
lapply(res$data,function(x){x$fields$name})
# Request URL :
url  = res$data[[numero]]$href
req  = request(url)
resp = req_perform(req)
resp = resp_body_json(resp)
# Print resource to txt file :
if(!is.null(txt)){
# sink(
#   file = paste0(
#     "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/Logs/",
#     namefile,
#     ".txt"
#   ),
#   append = FALSE,
#   type = c("output")
# )
ifelse(endpoint == 1,
req_perform(
request(res$data[[1]]$href),
path = paste0("C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/",namefile)),
ifelse(endpoint == 2,
resp$data[[1]]$fields$description,
"autre type de document..."
))
# print(resp$data[[1]]$fields$name)
# print(resp$data[[1]]$fields$description)
print(resp$data[[1]]$fields$body)
# sink()
}
# Print resource as HTML :
if(!is.null(html)){
sink(
file = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/HTML/",
namefile,
".html"
),
append = FALSE,
type = c("output")
)
print(resp$data[[1]]$fields$`description-html`)
print(resp$data[[1]]$fields$`body-html`)
sink()
}
# Save pdf file :
if (!is.null(pdf)) {
req_perform(
request(resp$data[[1]]$fields$url),
path = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/PDF/",
namefile,
".pdf"
)
)
}
# sink(file = paste0("C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/Logs/",namefile,"_pdf.txt"), append = FALSE, type = c("output"))
# if(pdf==TRUE){
# library(pdftools)
# pdftools::pdf_text(pdf = req$body)
# }
# sink()
return(resp_body_json(req_perform(req)))
}
test_1 = PRINT_SEARCH(
res = res,
numero = numero,
endpoint = endpoint,
namefile = "test_2",
txt = TRUE,
html = TRUE,
pdf = TRUE
)
PRINT_SEARCH = function(res,
numero,
namefile,
endpoint,
txt = NULL,
html = NULL,
pdf = NULL) {
# Get specific ENDPOINT item :
x = Param_table[,2] == type
field = Param_table[x,1]
# Menu results :
lapply(res$data,function(x){x$fields$name})
# Request URL :
url  = res$data[[numero]]$href
req  = request(url)
resp = req_perform(req)
resp = resp_body_json(resp)
# Print resource to txt file :
if(!is.null(txt)){
# sink(
#   file = paste0(
#     "C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/Logs/",
#     namefile,
#     ".txt"
#   ),
#   append = FALSE,
#   type = c("output")
# )
ifelse(endpoint == 1,
req_perform(
request(res$data[[1]]$href),
path = paste0("C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/",namefile)),
ifelse(endpoint == 2,
resp$data[[1]]$fields$description,
"autre type de document..."
))
# print(resp$data[[1]]$fields$name)
# print(resp$data[[1]]$fields$description)
print(resp$data[[1]]$fields$body)
# sink()
}
# Print resource as HTML :
if(!is.null(html)){
sink(
file = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/HTML/",
namefile,
".html"
),
append = FALSE,
type = c("output")
)
print(resp$data[[1]]$fields$`description-html`)
print(resp$data[[1]]$fields$`body-html`)
sink()
}
# Save pdf file :
if (!is.null(pdf)) {
req_perform(
request(resp$data[[1]]$fields$url),
path = paste0(
"C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/DATAs/PDF/",
namefile
)
)
}
# sink(file = paste0("C:/Users/Benjamin/Documents/GITHub/HDX_Proj-1/Logs/",namefile,"_pdf.txt"), append = FALSE, type = c("output"))
# if(pdf==TRUE){
# library(pdftools)
# pdftools::pdf_text(pdf = req$body)
# }
# sink()
return(resp_body_json(req_perform(req)))
}
test_1 = PRINT_SEARCH(
res = res,
numero = numero,
endpoint = endpoint,
namefile = "test_2",
txt = TRUE,
html = TRUE,
pdf = TRUE
)
res = Main(
endpoint = endpoint,
limit = limit,
field = field,
value = value,
# disaster = "storm",
date.start = date.start
)
res
lapply(res$data,function(x){})
res$data[[1]]$fields
res$data[[1]]$fields$title
lapply(res$data,function(x){$fields$title})
lapply(res$data,function(x){x$fields$title})
lapply(res$data,function(x){unlist(x$fields$title)})
unlist(lapply(res$data,function(x){x$fields$title}))
res$data[[1]]$score
unlist(lapply(res$data,function(x){x$fields$title}))
print(x$score)
unlist(lapply(res$data,function(x){
print(x$fields$title)
print(x$score)
})
unlist(lapply(res$data,function(x){
print(x$fields$title)
print(x$score)
}))
plot(x$score)
print(x$href)
unlist(lapply(res$data,function(x){
print(x$fields$title)
print(x$score)
print(x$href)
}))
Main(endpoint = 2,ascending.title = TRUE,disaster = Flood)
Main(endpoint = 2,ascending.title = TRUE,disaster = "Flood")
x = Main(endpoint = 2,ascending.title = TRUE,disaster = "Flood")
res_summary(x)
res_summary(x,type = "disasters")
x = Main(endpoint = 2,ascending.date = TRUE,disaster = "Flood")
x = Main(endpoint = 2,ascending.date = FALSE,disaster = "Flood")
x = Main(endpoint = 2,ascending.date = FALSE,disaster = "Pandemic")
x = Main(endpoint = 2,ascending.date = FALSE,disaster = "Pandemie")
x = Main(endpoint = 2,ascending.date = FALSE,disaster = "Pandemy")
x = Main(endpoint = 2,ascending.date = FALSE,disaster = "Pand")
x = Main(endpoint = 2,ascending.date = FALSE,disaster = "Epidemic")
x = Main(endpoint = 2,ascending.date = FALSE,disaster = "Epidemic", value = c("Dengue"),field = c("name"))
Main(endpoint = 1,limit = 50,ascending.date = FALSE, value = c("WHO"),field = c("title"))
res_summary(Main(endpoint = 1,limit = 50,ascending.date = FALSE, value = c("WHO"),field = c("title")),type = "reports")
x = res_summary(Main(endpoint = 2,ascending.date = FALSE,disaster = "Epidemic", value = c("Dengue"),field = c("name")),type = "disasters")
x
# Search for epidemiologic events for DENGUE disease, chronologicaly ordered :
x = res_summary(Main(endpoint = 2,ascending.date = FALSE,disaster = "Epidemic", value = c("Dengue"),field = c("name")),type = "disasters")
x
x = Main(endpoint = 2,ascending.date = FALSE,disaster = "Epidemic", value = c("Dengue"),field = c("name"))
res_summary(x,type = "disasters")
